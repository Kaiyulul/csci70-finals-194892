program BonusMergeSort
        integer, parameter :: N = 10
        integer :: A(N) = (/ 10, 9, 8, 7, 1, 3, 2, 6, 5, 4 /)
        integer :: work((size(A) + 1) / 2)
        write(*,'(A,/,10I3)')'Unsorted array :',A
        call MergeSort(A, work)
        write(*,'(A,/,10I3)')'Sorted array :',A
      contains

      subroutine merge(X, Y, Z)
        implicit none
        integer, target, intent(in) :: X(:), Y(:)
        integer, target, intent(inout) :: Z(:)
        integer :: i, j, k

        if (size(X) + size(Y) > size(Z)) stop(1)

        i = 1; j = 1
        do k = 1, size(Z)
          if (i <= size(X) .and. j <= size(Y)) then
            if (X(i) <= Y(j)) then
              Z(k) = X(i)
              i = i + 1
            else
              Z(k) = Y(j)
              j = j + 1
            end if
          else if (i <= size(X)) then
            Z(k) = X(i)
            i = i + 1
          else if (j <= size(Y)) then
            Z(k) = Y(j)
            j = j + 1
          end if
        end do
      end subroutine merge

      subroutine swap(x, y)
        implicit none
        integer, intent(inout) :: x, y
        integer :: tmp
        tmp = x; x = y; y = tmp
      end subroutine

      recursive subroutine MergeSort(X, work)
        implicit none
        integer, intent(inout) :: X(:)
        integer, intent(inout) :: work(:)
        integer :: half
        half = (size(X) + 1) / 2
        if (size(X) < 2) then
          continue
        else if (size(X) == 2) then
          if (X(1) > X(2)) then
            call swap(X(1), X(2))
          end if
        else
          call MergeSort(X( : half), work)
          call MergeSort(X(half + 1 :), work)
          if (X(half) > X(half + 1)) then
            work(1 : half) = X(1 : half)
            call merge(work(1 : half), X(half + 1:), X)
          endif
        end if
      end subroutine MergeSort
      end program BonusMergeSort
